type LengthUnit {
  ctor LengthUnit(pxFactor: Num)
}

val px = LengthUnit(1)
val mm = LengthUnit(25.4)

type Length {
  ctor Length(value: Num, unit: LengthUnit)
  def convert (l: Length, targetUnit: Unit) -> Length =
    Length(l.value / l.unit.pxFactor * targetUnit.pxFactor, targetUnit)
}

def matrixToString(m: Matrix) -> Unit =
  sprintf("transform(%d %d %d %d %d %d)", [ m.a, m.b, m.c, m.d, m.e, m.f ])

class Transformable[t] {
  def setMatrix(node: t, m: Matrix) -> Unit
}

/*
mixin TransformableImpl {
  def setMatrix(node: t, m: Matrix) -> Unit =
    node.setAttr("transform", matrixToString(m))
}
*/
type Line extends Transformable {

  ctor SvgLine(n: Node)
  
}
