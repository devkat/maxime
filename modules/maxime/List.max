import maxime.Option
import maxime.Num

class List[a] is Functor
  Nil
  map[b](f: a → b) → List[b] = Nil
  head() → Option[a] = None
  tail() → List[a] = Nil
  ++(l:List[a]) → List[a] = l
  length() → Num = 0
  join(sep:String) → String = ""

  Cons(headElem: a, tailList: List[a])
  map(f: a → b) → List[b] = Cons(f(headElem), tailList.map(f))
  head() → Option[a] = headElem
  tail() → List[a] = tailList
  ++(l: List[a]) → List[a] = Cons(headElem, tailList ++ l)
  length() → Num = 1 + tailList.length()
  join(f: a → String, sep:String) → String = tailList match
    case Nil => f(headElem)
    case _ => f(headElem) + sep + tailList.join(f, sep)
