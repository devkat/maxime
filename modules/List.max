type List[a] extends Functor {
  ctor Cons(head: a, tail: List[a])
  ctor Nil()
  
  def map (list: List[a], f: a -> b) -> List[b] =
    list match
      case Cons(head, tail) => Cons(f(head), map(tail, f))
      case Nil() => Nil()

  def head (list: List[a]) -> a = list.head

  def tail (list: List[a]) -> List[a] = list.tail

  def concat (l1: List[a], l2: List[a]) -> List[a] =
    l1 match
      case Nil() => l2
      case Cons(head, tail) => Cons(head, concat(tail, l2))

}